// External imports
use std::fs::File;
use std::io::{self, BufRead, BufReader};
use std::error::Error;
use clap::Parser;


/// Command line arguments for the number pairs processor. This struct is used
/// to parse the command line arguments using the `clap` crate.
#[derive(Parser, Debug)]
#[command(author, version, about = "Process pairs of numbers from a file")]
struct Args {
    /// Input file containing number pairs
    #[arg(short, long)]
    file: String,
}


/// Read a file with two columns of numbers and return them as two vectors
///
/// # Arguments
/// * `filename`: A string slice that holds the name of the file to read
///
/// # Returns
/// A tuple containing two vectors of integers. The first vector contains the
/// numbers from the first column, and the second vector contains the numbers
/// from the second column.
fn read_number_pairs(filename: &str) -> io::Result<(Vec<i32>, Vec<i32>)> {

    // Create vectors to store the two columns. We will be pushing
    // numbers into these vectors as we read the file.
    let mut first_vec = Vec::new();
    let mut second_vec = Vec::new();

    // Open the file. We are using the ? operator to propagate any errors - for
    // example, if the file does not exist.
    let file = File::open(filename)?;
    let reader = BufReader::new(file);

    // Read the file line by line
    for line in reader.lines() {
        let line = line?;

        // Split each line by whitespace and collect into a vector
        let numbers: Vec<i32> = line
            .split_whitespace()
            .filter_map(|s| s.parse().ok())
            .collect();

        // Check if we have exactly two numbers, and if we do, we push them
        // onto their respective vectors.
        if numbers.len() == 2 {
            first_vec.push(numbers[0]);
            second_vec.push(numbers[1]);
        }
    }

    Ok((first_vec, second_vec))
}


/// Calculate the difference between each pair of numbers in the two lists,
/// and return the sum of the values of these differences.
///
/// # Arguments
/// * `first_list`: A vector of integers
/// * `second_list`: A vector of integers
///
/// # Returns
/// The sum of the differences between each pair of numbers in the two lists.
fn calculate_difference_sum(first_list: &Vec<i32>, second_list: &Vec<i32>) -> i32 {
    // Create a variable to store the sum of the differences
    let mut sum = 0;

    // Iterate over the two lists, and calculate the difference between each pair. This
    // difference is added to the sum.
    for (first, second) in first_list.iter().zip(second_list.iter()) {
        sum += (first - second).abs();
    }

    // Return the sum
    sum
}


/// Calculate a similarity score between two lists of numbers. The similarity score
/// is generated by taking each number in the first list, and the finding how many
/// numbers in the second list are the same, and multiplying this by the number. For
/// example, if the first list is [1, 2, 3] and the second list is [2, 3, 3], the
/// similarity score would 1x0 + 2x1 + 3x2 = 8.
///
/// # Arguments
/// * `first_list`: A vector of integers
/// * `second_list`: A vector of integers
///
/// # Returns
/// The similarity score between the two lists as i32
fn calculate_similarity_score(first_list: &Vec<i32>, second_list: &Vec<i32>) -> i32 {
    // Create a variable to store the similarity score
    let mut score = 0;

    // Iterate over the two lists, and calculate the similarity score
    for first in first_list.iter() {
        let count = second_list.iter().filter(|&x| x == first).count();
        score += first * count as i32;
    }

    // Return the similarity score
    score
}



fn main() -> Result<(), Box<dyn Error>> {
    println!("Welcome to Day 1!");

    // Parse command line arguments
    let args = Args::parse();

    // Read the number pairs from the file passed as an argument
    let (mut first_list, mut second_list) = read_number_pairs(&args.file)?;

    // sort the lists. We could use unstable sort here if performance is a concern.
    first_list.sort();
    second_list.sort();

    // Calculate the sum of the differences between the two lists
    let sum = calculate_difference_sum(&first_list, &second_list);

    println!("The sum of the differences between the two lists is: {}", sum);

    // Calculate the similarity score between the two lists
    let score = calculate_similarity_score(&first_list, &second_list);

    println!("The similarity score between the two lists is: {}", score);

    Ok(())
}


#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_calculate_difference_sum() {
        let first_list = vec![1, 2, 3];
        let second_list = vec![4, 5, 6];

        assert_eq!(calculate_difference_sum(&first_list, &second_list), 9);
    }

    #[test]
    fn test_calculate_similarity_score() {
        let first_list = vec![1, 2, 3];
        let second_list = vec![2, 3, 3];

        assert_eq!(calculate_similarity_score(&first_list, &second_list), 8);
    }
}
